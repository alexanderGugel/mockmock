{"name":"Mockmock","tagline":"A Mocking Library for Minimalists","body":"# mockmock\r\n\r\n[![Build Status](https://travis-ci.org/alexanderGugel/mockmock.svg)](https://travis-ci.org/alexanderGugel/mockmock)\r\n[![npm](https://img.shields.io/npm/v/mockmock.svg?style=flat)](https://npmjs.org/package/mockmock)\r\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](http://standardjs.com/)\r\n\r\nMocking library for minimalists and people that don't want to remember 500 different methods.\r\n\r\n![Curiout Chicken](https://farm8.staticflickr.com/7201/6825992286_1762072c7b_b.jpg)\r\n\r\n## Why?\r\n\r\nI like [sinon](http://sinonjs.org/docs/), but I am not a big fan of forcing users to remember the difference between stubs, spies and mocks. There is no need for a ton of different methods. `mockmock` is a much simpler approach that offers a sufficient solution for the majority of use-cases.\r\n\r\n## Example\r\n\r\n`mockmock` exports a single function `mock`.\r\n`mock` accepts the function to be mocked or a constant value to be returned:\r\n\r\n```js\r\nvar mocked = mock(function (color, fruit) {\r\n  console.log('A', color, fruit)\r\n})\r\n\r\nmocked('red', 'apple') // #=> A red apple\r\nmocked('yellow', 'banana') // #=> A yellow banana\r\nmocked('green', 'cucumber') // #=> A green cucumber\r\n```\r\n\r\n```js\r\nvar mocked = mock(123)\r\n\r\nconsole.log(mocked()) // #=> 123\r\n```\r\n\r\nApart from defining behavior, the mock function is also a \"spy\", which means you can access its arguments, thisArg etc.:\r\n\r\n```js\r\nvar mocked = mock()\r\n\r\nmocked(1, 2, 3)\r\nconsole.log(mocked.args) // #=> [[1, 2, 3]]\r\n\r\nmocked(4, 5, 6)\r\nconsole.log(mocked.args) // #=> [[1, 2, 3], [4, 5, 6]]\r\n\r\nmocked.apply({}, [])\r\nconsole.log(mocked.thisValues) // #=> [this, this, {}]\r\n```\r\n\r\n## Install\r\n\r\nWith [npm](https://www.npmjs.com/package/mockmock) do:\r\n\r\n```\r\nnpm i mockmock -S\r\n```\r\n\r\n`mockmock` can then be `require`d as follows:\r\n\r\n```js\r\nvar mock = require('mockmock')\r\n```\r\n\r\nor:\r\n\r\n```js\r\nvar mock = require('mockmock').mock\r\n```\r\n\r\n## API\r\n\r\nIf you are familiar with [sinon](http://sinonjs.org/docs/), a lot of the methods might look familiar to you.\r\n\r\n### `mock()` #=> `mockedFn`\r\n\r\nEither accepts a constant value to be returned using an identity function or a function to be mocked. If no argument is provided, a noop function will be used.\r\n\r\n```js\r\nvar mockedIdentityFn = mock('123')\r\nconsole.log(mockedIdentityFn()) // #=> '123'\r\n\r\nvar mockedFn = mock(function () {\r\n  return 'hello'\r\n})\r\nconsole.log(mockedFn()) // #=> 'hello'\r\n\r\nvar mockedNoop = mocke()\r\nconsole.log(mockedNoop()) // #=> undefined\r\n```\r\n\r\n### `args`\r\n\r\nAn array of recorded `arguments`. `arguments` will be converted to an actual array to allow easy usage of `deepEqual` methods.\r\n\r\n```js\r\nvar mocked = mock(function () {})\r\nmocked(1, 2, 3)\r\nmocked(4, 5, 6)\r\nconsole.log(mocked.args) // #=> [[1, 2, 3], [4, 5, 6]]\r\n```\r\n\r\n### `thisValues`\r\n\r\nSimilar to `args`, records the `thisValue` the mocked function has been called with.\r\n\r\n```js\r\nvar mocked = mock(function () {})\r\nmocked.call({ a: 'a' })\r\nmocked.call({ b: 'b' })\r\nconsole.log(mocked.thisValues) // #=> [{ a: 'a' }, { b: 'b' }]\r\n```\r\n\r\n### `returnValues`\r\n\r\nSimilar to `args`, records the return values of the mocked function.\r\n\r\n```js\r\nvar i = 0\r\nvar mocked = mock(function () {\r\n  return i++\r\n})\r\nmocked()\r\nmocked()\r\nmocked()\r\nconsole.log(mocked.returnValues) // #=> [0, 1, 2]\r\n```\r\n\r\n### `calls`\r\n\r\nKeeps track of **when** (unix timestamp) the mocked function has been called.\r\n\r\n```js\r\nvar mocked = mock()\r\nmocked()\r\nmocked()\r\nmocked()\r\nconsole.log(mocked.calls) // #=> [1445386361361, 1445386361365, 1445386361369]\r\n```\r\n\r\n### `errors`\r\n\r\nRecords the errors thrown by the function that has been mocked. Note that thrown errors **will be passed through** the mock function.\r\n\r\n```js\r\nvar error = new Error()\r\nvar mocked = mock(function () { throws error })\r\ntry { mocked() } catch (e) {}\r\nconsole.log(mocked.errors) // #=> [error]\r\n```\r\n\r\n### `callCount`\r\n\r\nHow many times has the mocked function been called?\r\n\r\n```js\r\nvar mocked = mock()\r\nmocked()\r\nmocked()\r\nmocked()\r\nconsole.log(mocked.callCount) // #=> 3\r\n```\r\n\r\n### `called`\r\n\r\nIf the mocked function has been called **at all**.\r\n\r\n```js\r\nvar mocked = mock()\r\nconsole.log(mocked.called) // #=> false\r\nmocked()\r\nconsole.log(mocked.called) // #=> true\r\n```\r\n\r\n### `calledOnce`\r\n### `calledTwice`\r\n### `calledThrice`\r\n\r\nIf the mocked function has been called **exactly** once, twice or three times.\r\n\r\n```js\r\nvar mocked = mock()\r\nconsole.log(mocked.calledOnce) // #=> false\r\nmocked()\r\nconsole.log(mocked.calledOnce) // #=> true\r\nmocked()\r\nconsole.log(mocked.calledOnce) // #=> false\r\nconsole.log(mocked.calledTwice) // #=> true\r\n```\r\n\r\n### `firstCall`\r\n### `secondCall`\r\n### `thirdCall`\r\n### `lastCall`\r\n\r\nReturns an object describing the first, second, third or last call.\r\n\r\n```js\r\nvar mocked = mock('hello world')\r\nmocked(1, 2, 3)\r\nconsole.log(mocked.firstCall) // #=> { thisValue: this, args: [1, 2, 3], returnValue: 'hello world', error: undefined }\r\n```\r\n\r\n### `clear`, `flush`, `reset`\r\n\r\nResets the internal spy. All recorded arguments, errors, return values etc. will be reset.\r\n\r\n```js\r\nvar mocked = mock()\r\nmocked()\r\nconsole.log(mocked.called) // #=> true\r\nmocked.clear()\r\nconsole.log(mocked.called) // #=> false\r\n```\r\n\r\n### `mockFn`\r\n\r\nThe function that is being mocked. Identity function of the passed in value when a constant value has been supplied.\r\n\r\n```js\r\nvar fn = function () {}\r\nvar mocked = mock(fn)\r\nconsole.log(mocked.mockFn, fn) // #=> true\r\n```\r\n\r\n### `mockValue`\r\n\r\nEquivalent of `mockFn` for mocked identities. References the supplied constant value (if any).\r\n\r\n```js\r\nvar c = 123\r\nvar mocked = mock(c)\r\nconsole.log(mocked.mockValue, c) // #=> true\r\n```\r\n\r\n*For more usage examples, have a look at the test suite.*\r\n\r\n## Credits\r\n\r\n* \"Curious Chicken\" image by [Ian Southwell](https://flic.kr/p/bpbZGb), licensed under [CC BY-NC-ND 2.0](https://creativecommons.org/licenses/by-nc-nd/2.0/)\r\n\r\n## License\r\n\r\nISC\r\n","google":"UA-53303016-2","note":"Don't delete this file! It's used internally to help with page regeneration."}